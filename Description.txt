DESCRIPTION
    This module gives access to the functions : 
    i) word count() - to count the occurrence of each word in the given string
    ii) addpref() - to add a prefix to each sentence of the given string
    iii) chrrem() - to remove the mentioned character in the given string
    iv) strrep() - to replace the occurrence of a string in the given string with a new string
    v) cwlcount() - to count the occurrence of each character, word and line in the given string
    vi) slicesub() - gives the step by step slice of the given string
    vii) ismem() - returns whether the second string is found in the first string or not
    viii) ispalindrome() - returns whether the given string is a palindrome or not
    ix) vowcons() - returns the number of vowels and consonants in the given string
    x) abece() - returns an abecedarian series
    xi) vowrem() - returns a string from the given string with all the vowels removed
    xii) chrcount() - returns the occurrence of the given character in the given string
    xiii) pyramid() - returns a pattern of specified condition
    xvii) iscapitalised() - used to check whether the given string is in capitalised form or not
    xiv) istitled() - checks whether the given string is in titled form
    xv) splitchr() - used to split all the characters in the given string

FUNCTIONS
    abece(a)
        # abece() - returns an abecedarian series
        # input - a string
        # output - an abecedarian series with the given string
    
    addpref(a, b)
        # addpref() - to add a prefix to each sentence of the given string
        # inputs - two(strings - a string and a prefix)
        # output - a list containing prefix added sentences as its elements
    
    chrrem(a, b)
        # chrrem() - to remove the mentioned character in the given string
        # inputs - two (strings - a string and a character to be removed)
        # output - a string from the main string with the mentioned character removed
    
    cwlcount(a)
        # cwlcount() - to count the occurrence of each character, word and line in the given string
        # inputs - a string
        # output - a list containing dictionaries that contain keys as character or word or a line and their occurrence as their values
    
    iscapitalised(a)
        # iscapitalised() - used to check whether the given string is in capitalised form or not
        # input - a string
        # output - True / False. True if the first character of each line in the given string is in uppercase and rest are in lowercase. 

False otherwise
    
    ismem(a, b)
        #  ismem() - returns whether the second string is found in the first string or not
        # inputs - two strings
        # output - True / False. True is second parameter is in the first parameter. False otherwise
    
    ispalindrome(a)
        # ispalindrome() - returns whether the given string is a palindrome or not
        # input - a string
        # output - True / False. True if the given string is a palindrome. False otherwise
    
    istitled(a)
        #istitled() - checks whether the given string is in titled form
        # input - a string
        # output - True / False. True if the first character of each word is in uppercase and the rest are in lowercase. False otherwise
    
    pyramid(a, b, space=False, align='left')
        # pattern - returns a pattern of specified condition
        # inputs - four (an integer, a string, parameter space = True / False, parameter align = 'left' / 'right' / 'center')
        # output - returns a pattern based on the given condition
        #       1) space - False 
        #               i) align = 'left' - align the pattern without space to the left
        #               i) align = 'right' - align the pattern without space to the right
        #               i) align = 'center' - align the pattern without space to the center
        #       1) space - True
        #               i) align = 'left' - align the pattern with space to the left
        #               i) align = 'right' - align the pattern with space to the right
        #               i) align = 'center' - align the pattern with space to the center
    
    slicesub(a)
        # slicesub() - gives the step by step slice of the given string
        # input - a string
        # output - step by step slices
    
    splitchr(a, duplicate=False)
        # splitchr() - used to split all the characters in the given string
        # inputs - a string and a parameter duplicate = True/False
        # output - gives a list with all the characters in the given string
        #       i) if duplicate==False, the duplicates are not removed
        #       ii) if duplicate==True, duplicates are removed
    
    strrep(a, b, c)
        # strrep() - to replace the occurrence of a string in the given string with a new string
        # inputs - three strings(a string, string to be replaced, string to be replaced with)
        # output - a string with the string to be replaced with the string to be replaced with
    
    vowcons(a)
        # vowcons() - returns the number of vowels and consonants in the given string
        # input - a string
        # output - a dictionary with 'vowels' and 'consonants' as keys and their count as their values
    
    vowrem(a)
        # vowrem() - returns a string from the given string with all the vowels removed
        # input - a string
        # output - a string from the main string with all the vowels removed
    
    wordcount(a1)
        # word count() - to count the occurrence of each word in the given string
        # parameters - one(a string)
        # output - a dictionary with words as keys and its occurrence as their values

